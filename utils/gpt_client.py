import openai
import base64
from typing import List
from dotenv import load_dotenv
from utils.clean_gpt_response import clean_gpt_response
import os

load_dotenv()  # .env 파일 로드

gpt_api_key = os.getenv("GPT-API-KEY")

def encode_images_to_base64(image_paths:List[str]) -> List[str]:
    encoded_images = []
    for path in image_paths:
        with open(path, "rb") as img_file:
            b64 = base64.b64encode(img_file.read()).decode("utf-8")
            encoded_images.append(b64)
    return encoded_images

def get_prompts_by_doc_type(doc_type:str) -> tuple[str,str]:
    if doc_type == "부동산등기부등본":
        return (
            """
            당신은 등기부 등본 이미지를 JSON 구조로 정리해주는 전문가입니다.
            주어진 이미지들은 등기사항일부증명서의 스캔본입니다. 표 안에 있는 내용을 그대로 분석해서, 최대한 문서 구조를 유지한 JSON 형태로 변환해주세요.
            아래 사항을 반드시 지켜주세요:
            - 셀 안의 텍스트를 사람이 보이는 대로 그대로 사용해주세요.
            - 중복되는 내용이 있더라도 정리하지 말고 그대로 적어주세요.
            - 표제부, 명의인 등은 항목 단위로 나누고, 내부 항목은 딕셔너리처럼 구성해주세요.
            - 항목명이 없는 셀이나 병합된 셀도 보이는 대로 묶어 적어주세요.
            - 참고사항 및 비고도 적어주세요.
            - 날짜, 주소, 이름, 지분 등을 해석하지 말고 그대로 써 주세요.
            """,
            """
            예시:
            {
            "등기사항일부증명서(현재 소유현황)": {
                "등기유형": "건물",
                "고유번호": "...",
                "주소": "...",
                "【 표제부 】 (건물의 표시)": {
                "표시번호": "1",
                "접수": "2011년 4월 23일",
                "소재지번, 건물명칭 및 번호": "...",
                "건물내역": "...",
                "등기원인 및 기타사항": "..."
                },
                "【 명의인 】": {
                "등기명의인": "...",
                "(주민)등록번호": "...",
                "최종지분": "..."
                "주소": "..."
                "순위번호": "..."
                },
                "관할등기소": "...",
                "열람일시": "...",
                "비고": [
                "[ 참 고 사 항 ]\n
                가. 등기기록에서 유효한 지분을 가진 소유자 혹은 공유자 현황을 표시합니다.
                나. 최종지분은 등기명의인이 가진 최종지분이며, 2개 이상의 순위번호에 지분을 가진 경우 그 지분을 합산하였습니다.
                다. 순위번호는 등기명의인이 지분을 가진 등기 순위번호입니다.
                라. 신청사항과 관련이 없는 소유권(갑구)과 소유권 이외의 권리(을구)사항은 표시되지 않았습니다.
                마. 지분이 통분되어 공시된 경우는 전체의 지분을 통분하여 공시한 것입니다.
                * 실선으로 그어진 부분은 말소사항을 표시함. * 기록사항 없는 갑구, 을구는 ‘기록사항 없음’으로 표시함."
                ]
            }
            }
            """
        )
    elif doc_type == "가족관계증명서":
        return (
            """
            당신은 가족관계증명서 이미지를 JSON 구조로 정리해주는 전문가입니다.

            주어진 이미지는 가족관계증명서(일반)이며, 표에 표시된 항목들을 사람이 읽는 그대로 정리해 주세요.

            다음 사항을 반드시 지켜주세요:
            - 문서에 적힌 항목은 순서대로 모두 반영해주세요.
            - 이름, 주민등록번호, 생년월일, 본, 관계 등은 **해석하지 말고** 그대로 추출해주세요.
            - 가족 구성원은 리스트로 구성하고, 각각 `관계`, `성명`, `출생연월일`, `주민등록번호`, `성별`, `본` 항목을 그대로 써 주세요.
            - 문서 상단과 하단의 발급 정보 및 인증 정보도 함께 JSON에 포함해 주세요.
            - 날짜, 번호, 기관명, 책임자 이름은 텍스트 그대로 옮겨 적어 주세요.

            """,
            """
            예시:
            {
                "가족관계증명서(일반)": {
                    "문서종류": "가족관계증명서(일반)",
                    "등록기준지": "서울특별시 중구 세종대로 100",
                    "발급일자": "2025-07-18",
                    "발급시간": "14:54",
                    "신청인": "김가영",
                    "증명서번호": "9192-2003-5983-1870",
                    "본인": {
                    "성명": "김가영(金佳榮)",
                    "출생연월일": "2000-08-12",
                    "주민등록번호": "000812-4******",
                    "성별": "여",
                    "본": "金海"
                    },
                    "가족관계": [
                    {
                        "관계": "부",
                        "성명": "김철수(金哲洙)",
                        "출생연월일": "1970-05-10",
                        "주민등록번호": "700510-1******",
                        "성별": "남",
                        "본": "金海"
                    },
                    {
                        "관계": "모",
                        "성명": "이영희(李英姬)",
                        "출생연월일": "1972-09-28",
                        "주민등록번호": "720928-2******",
                        "성별": "여",
                        "본": "全州"
                    },
                    {
                        "관계": "배우자",
                        "성명": "박동수(朴東洙)",
                        "출생연월일": "1999-03-23",
                        "주민등록번호": "990323-3******",
                        "성별": "남",
                        "본": "密陽"
                    },
                    {
                        "관계": "자녀",
                        "성명": "박지우(朴智雨)",
                        "출생연월일": "2022-11-01",
                        "주민등록번호": "221101-4******",
                        "성별": "여",
                        "본": "密陽"
                    },
                    {
                        "관계": "자녀",
                        "성명": "박하준(朴河準)",
                        "출생연월일": "2024-02-14",
                        "주민등록번호": "240214-1******",
                        "성별": "남",
                        "본": "密陽"
                    }
                    ],
                    "발급기관": {
                    "기관명": "법원행정처 전산정보중앙관리소",
                    "책임자": "전산운영책임관 박준우"
                    },
                    "비고": [
                    "위 가족관계증명서(일반)는 가족관계등록부의 기록사항과 틀림없음을 증명합니다.",
                    "위 증명서는 「가족관계의 등록 등에 관한 법률」 제15조제2항에 따른 등록사항을 전출한 일반증명서입니다.",
                    "전자 가족관계등록시스템(https://efamily.scourt.go.kr)의 증명서 진위확인 메뉴에서 발급일로부터 3개월까지 위변조 여부를 확인할 수 있습니다."
                    ]
                }
            }
            """
        )
    elif doc_type == "재학증명서":
        return (
            """
            당신은 재학증명서 이미지를 JSON 구조로 정리해주는 전문가입니다.

            주어진 이미지는 재학증명서이며, 표에 표시된 항목들을 사람이 읽는 그대로 정리해 주세요.

            다음 사항을 반드시 지켜주세요:
            - 문서에 적힌 항목은 순서대로 모두 반영해주세요.
            - 일치하는 항목이 없는경우 "" 으로 놔두세요.
            - 문서 상단과 하단의 발급 정보 및 인증 정보도 함께 JSON에 포함해 주세요.
            - 날짜, 번호, 기관명, 발급인(총장, 이사, 이름 등)은 텍스트 그대로 옮겨 적어 주세요.

            """,
            """
            {
                "문서확인번호": "",
                "제출처": "",
                "용도": "",
                "재학증명서": {
                    "성명": "",
                    "생년월일": "",
                    "소속": "",
                    "학년": ""
                },
                "발급일": "",
                "발급기관": "",
                "발급인": "",
                "본문": ""
                }
            """
        )
    else:
        raise ValueError("지원하지 않는 문서 유형입니다.")

def call_gpt_for_structured_json(image_paths: List[str], doc_type:str) -> str:
    encoded_images = encode_images_to_base64(image_paths)
    system_prompt, user_text = get_prompts_by_doc_type(doc_type)

    messages = [
        {"role": "system", "content": system_prompt},
        {
            "role": "user",
            "content": [
                {"type": "text", "text": user_text},
                *[{"type": "image_url", "image_url": {"url": f"data:image/png;base64,{b64}"}} for b64 in encoded_images]
            ]
        }
    ]

    response = openai.chat.completions.create(
        model="gpt-4o",
        messages=messages
    )

    raw_result = response.choices[0].message.content
    clean_result = clean_gpt_response(raw_result)

    return clean_result